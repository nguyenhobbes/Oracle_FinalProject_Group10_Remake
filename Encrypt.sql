CONNECT MATTHEW/1
DROP TABLE SYEK;
CREATE TABLE SYEK (
  IKEYD RAW(32) PRIMARY KEY,
  ENK RAW(32)
);

CONNECT SYS/1 AS SYSDBA
CREATE OR REPLACE TRIGGER TRIG_INSERT_EMPLOYEE
  AFTER INSERT ON MATTHEW.NHANVIEN
  FOR EACH ROW
BEGIN
  INSERT INTO MATTHEW.SYEK (IKEYD, ENK)
  VALUES (
    DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(:NEW.PHG || :NEW.MANV, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256),
    DBMS_CRYPTO.RANDOMBYTES(32)
  );
END;
/

--ENCRYPT
CREATE OR REPLACE FUNCTION encrypt_data_with_key (mes VARCHAR2, k RAW)
RETURN RAW
IS
  encrypted_data RAW(2000);
BEGIN
  encrypted_data := DBMS_CRYPTO.ENCRYPT(
    src => UTL_I18N.STRING_TO_RAW(mes, 'AL32UTF8'),
    typ => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CFB + DBMS_CRYPTO.PAD_NONE,
    key => k
  );
  RETURN encrypted_data;
END encrypt_data_with_key;
/

-- DECRYPT
CREATE OR REPLACE FUNCTION decrypt_data_with_key (
  cipher IN VARCHAR2,
  k IN RAW
) RETURN VARCHAR2 IS
  e_raw RAW(2000);
  d_raw RAW(2000);
BEGIN
  e_raw := UTL_I18N.STRING_TO_RAW(cipher, 'AL32UTF8');
  d_raw := DBMS_CRYPTO.decrypt(
    src => e_raw,
    typ => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CFB + DBMS_CRYPTO.PAD_NONE,
    key => k
  );
  RETURN UTL_I18N.RAW_TO_CHAR(d_raw, 'AL32UTF8');
END;
/

--RANDOM KEY
DECLARE
  hash_v RAW(32);
  e_key RAW(32);
BEGIN
  FOR r_employee IN (SELECT * FROM MATTHEW.NHANVIEN) LOOP
    hash_v := DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(r_employee.PHG || r_employee.MANV, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);
    
    BEGIN
      SELECT ENK
      INTO e_key
      FROM MATTHEW.SYEK
      WHERE IKEYD = hash_v;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        -- Insert a new encryption key for the employee if it does not exist
        INSERT INTO MATTHEW.SYEK (IKEYD, ENK)
        VALUES (hash_v, DBMS_CRYPTO.RANDOMBYTES(32));
    END;
  END LOOP;
  COMMIT;
END;
/

--update table nhhanvien
DECLARE
  v_ENK RAW(32);
BEGIN
  FOR r_employee IN (SELECT * FROM MATTHEW.LUONGTAM) LOOP
    BEGIN
      SELECT ENK
      INTO v_ENK
      FROM MATTHEW.SYEK
      WHERE IKEYD = DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(r_employee.PHG || r_employee.MANV, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);

      UPDATE MATTHEW.NHANVIEN
      SET LUONG = encrypt_data_with_key(TO_CHAR(r_employee.LUONG), v_ENK),
          PHUCAP = encrypt_data_with_key(TO_CHAR(r_employee.PHUCAP), v_ENK)
      WHERE MANV = r_employee.MANV;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL; 
    END;
  END LOOP;
  COMMIT;
END;
/

CREATE OR ALTER PROCEDURE SP_SEL_NHANVIEN_LUONG(username varchar, phong varchar)
RETURN VARCHAR2 
IS
v_ENK RAW(32);
E_LUONG RAW(2000);
d_raw RAW(2000);
BEGIN
    SELECT ENK
      INTO v_ENK
      FROM MATTHEW.SYEK
      WHERE IKEYD = DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(phong || username, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);
    SELECT LUONG INTO E_LUONG FROM MATTHEW.NHANVIEN WHERE MANV = username and PHG = phong;
    d_raw := DBMS_CRYPTO.decrypt(src => E_LUONG, typ => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CFB + DBMS_CRYPTO.PAD_NONE, key => v_ENK);
  RETURN UTL_I18N.RAW_TO_CHAR(d_raw, 'AL32UTF8');
END;
/
--
--CREATE OR ALTER PROCEDURE SP_SEL_NHANVIEN_PHUCAP(username varchar, phong varchar)
--RETURN VARCHAR2 IS
--v_ENK RAW(32);
--E_PHUCAP RAW(2000);
--BEGIN
--    FOR r_employee IN (SELECT * FROM MATTHEW.NHANVIEN) LOOP
--    BEGIN
--      SELECT ENK
--      INTO v_ENK
--      FROM MATTHEW.SYEK
--      WHERE IKEYD = DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(r_employee.PHG || r_employee.MANV, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);
--              
--	
--    E_PHUCAP := DBMS_CRYPTO.decrypt(src => r_employee.PHUCAP, typ => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CFB + DBMS_CRYPTO.PAD_NONE,key => v_ENK);
--    END;
--  RETURN UTL_I18N.RAW_TO_CHAR(E_PHUCAP, 'AL32UTF8');
--  )
--END;
--/
--
--GRANT EXECUTE ON SYS.SP_SEL_NHANVIEN_LUONG TO PUBLIC;
--GRANT EXECUTE ON SYS.SP_SEL_NHANVIEN_PHUCAP TO PUBLIC;

--SELECT * FROM MATTHEW.SYEK
--SELECT * FROM MATTHEW.NHANVIEN